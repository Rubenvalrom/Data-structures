knit_with_parameters("C:/Users/rubi6/Escritorio/Universidad/Data structures/AB/Data-structures/Assignment Brief de UNIT 19 DATA STRUCTURES & ALGORITHMS.rmd")
unlink("Assignment Brief de UNIT 19 DATA STRUCTURES & ALGORITHMS_cache", recursive = TRUE)
unlink("Assignment Brief de UNIT 19 DATA STRUCTURES & ALGORITHMS_cache", recursive = TRUE)
knit_with_parameters("C:/Users/rubi6/Escritorio/Universidad/Data structures/AB/Data-structures/Assignment Brief de UNIT 19 DATA STRUCTURES & ALGORITHMS.rmd")
unlink("Assignment Brief de UNIT 19 DATA STRUCTURES & ALGORITHMS_cache", recursive = TRUE)
unlink("Assignment Brief de UNIT 19 DATA STRUCTURES & ALGORITHMS_cache", recursive = TRUE)
backends.update(_get_backends("networkx.backends")
reticulate::repl_python()
backends.update(_get_backends("networkx.backends")
pip upgrade("networkx")
pip update("networkx")
pip install("networkx")
pip backends.update(_get_backends("networkx.backends")
pip install networkx
# Importar librerias
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import random
from scipy.sparse import csr_matrix
import osmnx as ox
import sys
import timeit
# Semilla para reproducibilidad
np.random.seed(2706)
# Crear una grafo con 20 nodos
G = nx.Graph()
for i in range(14):
G.add_node(i)
# Añade aristas a la gráfica
G.add_edge(0, 3)
G.add_edge(3, 6)
G.add_edge(6, 9)
G.add_edge(9, 10)
G.add_edge(0, 2)
G.add_edge(2, 5)
G.add_edge(5, 8)
G.add_edge(8, 10)
G.add_edge(0, 1)
G.add_edge(1, 4)
G.add_edge(4, 7)
G.add_edge(7, 10)
G.add_edge(3, 6)
G.add_edge(6, 9)
G.add_edge(9, 13)
G.add_edge(13, 10)
G.add_edge(12, 9)
G.add_edge(12, 11)
G.add_edge(11, 10)
G.add_edge(12, 13)
# Calcula la matriz de adyacencia actualizada
matriz_adyacencia = nx.to_numpy_array(G)
# Asigna pesos a las aristas de forma sesgada
matriz_adyacencia[matriz_adyacencia == 1] = np.random.randint(2, 6,
size=np.count_nonzero(matriz_adyacencia == 1))
matriz_adyacencia[matriz_adyacencia == 0] = np.random.randint(12, 110,
size=np.count_nonzero(matriz_adyacencia == 0))
matriz_adyacencia[matriz_adyacencia > 20] = 0
np.fill_diagonal(matriz_adyacencia, 0)
# Convertir la matriz de adyacencia en una matriz dispersa
matriz_adyacencia = csr_matrix(matriz_adyacencia)
# Crear un grafo desde la matriz de adyacencia
G = nx.from_numpy_array(matriz_adyacencia)
# Dibujar el grafo con nodos en forma de elipse
fig = plt.figure(figsize=(8, 6))
# Número de nodos
num_nodos = len(G.nodes)
# Calcular las posiciones en forma de elipse
pos = {}
for i in range(num_nodos):
angle = 2 * np.pi * i / num_nodos
x = np.cos(angle)
y = np.sin(angle)
pos[i] = (x, y)
# Dibujar nodos y aristas
nx.draw(G, pos, with_labels=True, node_color='lightblue',
edge_color='darkgrey', node_size=1500, font_size=20)
fig.set_facecolor('white')
# Obtener los pesos de las aristas
edge_labels = nx.get_edge_attributes(G, 'weight')
# Apesar de no tener decimales salen como n.0, los paso a enteros para quitarlo
edge_labels = {key: int(value) for key, value in edge_labels.items()}
# Dibujar los pesos de las aristas
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels,
font_color='black', font_size=9,bbox=dict(facecolor='#e5e5e5',
edgecolor='darkgrey', boxstyle='round,pad=0.5'))
plt.show()
# Importar librerias
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import random
from scipy.sparse import csr_matrix
import osmnx as ox
import sys
import timeit
# Semilla para reproducibilidad
np.random.seed(2706)
# Crear una grafo con 20 nodos
G = nx.Graph()
for i in range(14):
G.add_node(i)
# Añade aristas a la gráfica
G.add_edge(0, 3)
G.add_edge(3, 6)
G.add_edge(6, 9)
G.add_edge(9, 10)
G.add_edge(0, 2)
G.add_edge(2, 5)
G.add_edge(5, 8)
G.add_edge(8, 10)
G.add_edge(0, 1)
G.add_edge(1, 4)
G.add_edge(4, 7)
G.add_edge(7, 10)
G.add_edge(3, 6)
G.add_edge(6, 9)
G.add_edge(9, 13)
G.add_edge(13, 10)
G.add_edge(12, 9)
G.add_edge(12, 11)
G.add_edge(11, 10)
G.add_edge(12, 13)
# Calcula la matriz de adyacencia actualizada
matriz_adyacencia = nx.to_numpy_array(G)
# Asigna pesos a las aristas de forma sesgada
matriz_adyacencia[matriz_adyacencia == 1] = np.random.randint(2, 6,
size=np.count_nonzero(matriz_adyacencia == 1))
matriz_adyacencia[matriz_adyacencia == 0] = np.random.randint(12, 110,
size=np.count_nonzero(matriz_adyacencia == 0))
matriz_adyacencia[matriz_adyacencia > 20] = 0
np.fill_diagonal(matriz_adyacencia, 0)
# Convertir la matriz de adyacencia en una matriz dispersa
matriz_adyacencia = csr_matrix(matriz_adyacencia)
# Crear un grafo desde la matriz de adyacencia
G = nx.from_numpy_array(matriz_adyacencia)
# Dibujar el grafo con nodos en forma de elipse
fig = plt.figure(figsize=(8, 6))
# Número de nodos
num_nodos = len(G.nodes)
# Calcular las posiciones en forma de elipse
pos = {}
for i in range(num_nodos):
angle = 2 * np.pi * i / num_nodos
x = np.cos(angle)
y = np.sin(angle)
pos[i] = (x, y)
# Dibujar nodos y aristas
nx.draw(G, pos, with_labels=True, node_color='lightblue',
edge_color='darkgrey', node_size=1500, font_size=20)
fig.set_facecolor('white')
# Obtener los pesos de las aristas
edge_labels = nx.get_edge_attributes(G, 'weight')
# Apesar de no tener decimales salen como n.0, los paso a enteros para quitarlo
edge_labels = {key: int(value) for key, value in edge_labels.items()}
# Dibujar los pesos de las aristas
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels,
font_color='black', font_size=9,bbox=dict(facecolor='#e5e5e5',
edgecolor='darkgrey', boxstyle='round,pad=0.5'))
plt.show()
quit
