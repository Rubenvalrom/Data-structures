camino = []
nodo_actual = nodo_fin
while nodo_actual != nodo_inicio:
camino.insert(0, nodo_actual)
nodo_actual = predecesores[nodo_actual]
camino.insert(0, nodo_inicio)
camino = np.array(camino, dtype=int)
return camino
from scipy.sparse.csgraph import dijkstra
inicio = timeit.default_timer()
for i in range(10000):
# Utiliza el algoritmo de Dijkstra a través de scipy
dist_matrix, predecessors = dijkstra(matriz_adyacencia, directed=False,
indices = 0, return_predecessors=True)
# Ruta del nodo 0 al 13
camino = trazar_camino(predecessors, 0, 13)
print("El camino desde el nodo 0 hasta el nodo 13 es:", camino)
print("La distancia mínima entre el nodo 0 y el nodo 13 es:", dist_matrix[13])
fin = timeit.default_timer()
tiempo_ejecución = round(fin - inicio, 4)
print("Tiempo de ejecución: ", tiempo_ejecución, " segundos")
from scipy.sparse.csgraph import bellman_ford
inicio = timeit.default_timer()
for i in range(10000):
# Utiliza el algoritmo de Bellman-Ford a través de scipy
dist_matrix, predecessors = bellman_ford(matriz_adyacencia, directed=False,
indices=0, return_predecessors=True)
# Ruta del nodo 0 al 13
camino = trazar_camino(predecessors, 0, 13)
print("El camino desde el nodo 0 hasta el nodo 13 es:", camino)
print("La distancia mínima entre el nodo 0 y el nodo 13 es:", dist_matrix[13])
fin = timeit.default_timer()
tiempo_ejecución = round(fin - inicio, 4)
print("Tiempo de ejecución: ", tiempo_ejecución, " segundos")
from scipy.sparse.csgraph import johnson
inicio = timeit.default_timer()
for i in range(10000):
#Utiliza el algoritmo de Johnson a través de scipy
dist_matrix, predecessors = johnson(matriz_adyacencia ,directed=False,
indices=0, return_predecessors=True)
# Ruta del nodo 0 al 13
camino = trazar_camino(predecessors, 0, 13)
print("El camino desde el nodo 0 hasta el nodo 13 es:", camino)
print("La distancia mínima entre el nodo 0 y el nodo 13 es:", dist_matrix[13])
fin = timeit.default_timer()
tiempo_ejecución = round(fin - inicio, 4)
print("Tiempo de ejecución: ", tiempo_ejecución, " segundos")
from scipy.sparse.csgraph import floyd_warshall
inicio = timeit.default_timer()
for i in range(10000):
#Utiliza el algoritmo de Floyd-Warshall a través de scipy
#Nota: Este algoritmo no permite calcular la distancia eligiendo un nodo de inicio
dist_matrix, predecessors = floyd_warshall(matriz_adyacencia, unweighted=False,
directed=False, return_predecessors=True)
# Ruta del nodo 0 al 13
camino = trazar_camino(predecessors[0], 0, 13)
print("El camino desde el nodo 0 hasta el nodo 13 es:", camino)
print("La distancia mínima entre el nodo 0 y el nodo 13 es:", dist_matrix[0, 13])
fin = timeit.default_timer()
tiempo_ejecución = round(fin - inicio, 4)
print("Tiempo de ejecución: ", tiempo_ejecución, " segundos")
# Función para trazar la ruta
def Trazar_camino_intermedio(predecesores, nodo_inicio, nodo_fin):
camino = []
nodo_actual = nodo_fin
while nodo_actual != nodo_inicio:
camino.insert(0, nodo_actual)
nodo_actual = predecesores[nodo_actual]
return camino
# Fución para crea la ruta
def Crear_ruta(M, inicio, destinos):
# Iniciar la ruta en el nodo inicial
ruta = np.array([inicio])
distancia = 0
nodo_más_cercano = inicio
destinos = np.array(destinos)
# Mientras queden destinos por visitar
while len(destinos) > 0:
# Utilizar el algoritmo de Dijkstra para encontrar
# la ruta más corta a cada nodo destino
dist_matrix, predecessors= dijkstra(M, directed=True,
indices=nodo_más_cercano, return_predecessors=True, limit=50000)
nodo_anterior = nodo_más_cercano
# Pasar la matriz de distancias a diccionario
dist_dic = {index: value for index, value in enumerate(dist_matrix)}
# Eliminar todos los valores que sean 0 y los nodos que no estén en destinos
dist_dic = {key: value for key, value in dist_dic.items()
if value != 0 and key in destinos}
# Encontrar el valor mínimo en el diccionario de distancias
min_value = min(dist_dic.values())
# Encontrar el siguiente nodo más cercano
for key, value in dist_dic.items():
if value == min_value:
nodo_más_cercano = key
break
# Actualizar la lista de destinos eliminando el nodo más cercano encontrado
destinos = destinos[destinos != nodo_más_cercano]
# Añadir el camino intermedio a la ruta
ruta = np.concatenate((ruta,
np.array(Trazar_camino_intermedio(predecessors, nodo_anterior, nodo_más_cercano))))
# Sumar la distancia al nodo más cercano a la distancia total
distancia += dist_dic[nodo_más_cercano]
# Devolver la ruta completa y la distancia total
return ruta, distancia
# Descargo el mapa de Madrid y lo guardo como grafo
# Nombre del lugar
place_name = "Madrid, Spain"
# Descargar la red de calles del lugar
G = ox.graph_from_place(place_name, network_type='drive', simplified = False)
# Guardar el grafo en un archivo GraphML
# El tiempo de descarga es elevado
ox.save_graphml(G, filepath='mapa/madrid2.graphml')
# Importo el grafo guardado
madrid = ox.load_graphml('mapa/madrid2.graphml')
# Calcular el número de nodos y aristas
num_nodos = len(madrid.nodes)
num_aristas = len(madrid.edges)
print(f"Número de nodos: {num_nodos}")
print(f"Número de aristas: {num_aristas}")
# Calcular la longitud de la red de calles
longitud = round(sum(nx.get_edge_attributes(madrid, 'length').values()))
longitud = round(longitud/1000)
print(f"Longitud total de la red de calles: {longitud} kilometros")
# Mostrar el grafo de la red de calles de Madrid
fig, ax = ox.plot_graph(madrid, bgcolor='none', node_color='b',
node_size=1.5, edge_color='k',
edge_linewidth=0.1, edge_alpha=0.8,
figsize=(20, 20),show=False)
#plt.savefig('imagenes/mapa_madrid.jpg', dpi=200)
plt.show()
# Convertir el grafo de Madrid en una matriz de adyacencia
#matriz_madrid = csr_matrix(nx.to_numpy_array(madrid, weight='length'))
# Guardar matriz para su posterior uso
# El tiempo de conversión es un poco elevado
#sp.save_npz('matriz/matriz_madrid.npz', matriz_madrid)
# Importar librerias
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import random
import scipy.sparse as sp
from scipy.sparse import csr_matrix
import osmnx as ox
import sys
import timeit
# Semilla para reproducibilidad
np.random.seed(2706)
# Crear una grafo con 20 nodos
G = nx.Graph()
for i in range(13):
G.add_node(i)
# Añade aristas a la gráfica
G.add_edge(0, 3)
G.add_edge(13, 6)
G.add_edge(6, 9)
G.add_edge(9, 10)
G.add_edge(0, 2)
G.add_edge(2, 5)
G.add_edge(5, 8)
G.add_edge(8, 1)
G.add_edge(0, 1)
G.add_edge(1, 4)
G.add_edge(4, 7)
G.add_edge(7, 10)
G.add_edge(3, 6)
G.add_edge(6, 9)
G.add_edge(13, 10)
G.add_edge(12, 9)
G.add_edge(11, 10)
G.add_edge(13, 11)
G.add_edge(11, 7)
G.add_edge(7, 4)
G.add_edge(4, 9)
G.add_edge(1, 2)
G.add_edge(12, 5)
G.add_edge(5, 8)
G.add_edge(8, 11)
G.add_edge(11, 12)
G.add_edge(12, 10)
G.add_edge(4, 10)
G.add_edge(2, 12)
# Asigna un peso aleatorio a cada arista
for u, v in G.edges:
G.edges[u, v]['weight'] = np.random.randint(1, 6)
# Calcula la matriz de adyacencia en forma de matriz dispersa
matriz_adyacencia = csr_matrix(nx.to_numpy_array(G))
# Dibujar el grafo con nodos en forma de elipse
fig = plt.figure(figsize=(8, 6))
# Número de nodos
num_nodos = len(G.nodes)
# Calcular las posiciones en forma de elipse
pos = {}
for i in range(num_nodos):
angle = 2 * np.pi * i / num_nodos
x = np.cos(angle)
y = np.sin(angle)
pos[i] = (x, y)
# Dibujar nodos y aristas
nx.draw(G, pos, with_labels=True, node_color='lightblue',
edge_color='darkgrey', node_size=1500, font_size=20)
plt.show()
# Función para trazar el camino desde un nodo dado
# hasta el nodo de inicio utilizando el array de predecesores
def trazar_camino(predecesores, nodo_inicio, nodo_fin):
camino = []
nodo_actual = nodo_fin
while nodo_actual != nodo_inicio:
camino.insert(0, nodo_actual)
nodo_actual = predecesores[nodo_actual]
camino.insert(0, nodo_inicio)
camino = np.array(camino, dtype=int)
return camino
from scipy.sparse.csgraph import dijkstra
inicio = timeit.default_timer()
for i in range(10000):
# Utiliza el algoritmo de Dijkstra a través de scipy
dist_matrix, predecessors = dijkstra(matriz_adyacencia, directed=False,
indices = 0, return_predecessors=True)
# Ruta del nodo 0 al 13
camino = trazar_camino(predecessors, 0, 13)
print("El camino desde el nodo 0 hasta el nodo 13 es:", camino)
print("La distancia mínima entre el nodo 0 y el nodo 13 es:", dist_matrix[13])
fin = timeit.default_timer()
tiempo_ejecución = round(fin - inicio, 4)
print("Tiempo de ejecución: ", tiempo_ejecución, " segundos")
from scipy.sparse.csgraph import bellman_ford
inicio = timeit.default_timer()
for i in range(10000):
# Utiliza el algoritmo de Bellman-Ford a través de scipy
dist_matrix, predecessors = bellman_ford(matriz_adyacencia, directed=False,
indices=0, return_predecessors=True)
# Ruta del nodo 0 al 13
camino = trazar_camino(predecessors, 0, 13)
print("El camino desde el nodo 0 hasta el nodo 13 es:", camino)
print("La distancia mínima entre el nodo 0 y el nodo 13 es:", dist_matrix[13])
fin = timeit.default_timer()
tiempo_ejecución = round(fin - inicio, 4)
print("Tiempo de ejecución: ", tiempo_ejecución, " segundos")
from scipy.sparse.csgraph import johnson
inicio = timeit.default_timer()
for i in range(10000):
#Utiliza el algoritmo de Johnson a través de scipy
dist_matrix, predecessors = johnson(matriz_adyacencia ,directed=False,
indices=0, return_predecessors=True)
# Ruta del nodo 0 al 13
camino = trazar_camino(predecessors, 0, 13)
print("El camino desde el nodo 0 hasta el nodo 13 es:", camino)
print("La distancia mínima entre el nodo 0 y el nodo 13 es:", dist_matrix[13])
fin = timeit.default_timer()
tiempo_ejecución = round(fin - inicio, 4)
print("Tiempo de ejecución: ", tiempo_ejecución, " segundos")
from scipy.sparse.csgraph import floyd_warshall
inicio = timeit.default_timer()
for i in range(10000):
#Utiliza el algoritmo de Floyd-Warshall a través de scipy
#Nota: Este algoritmo no permite calcular la distancia eligiendo un nodo de inicio
dist_matrix, predecessors = floyd_warshall(matriz_adyacencia, unweighted=False,
directed=False, return_predecessors=True)
# Ruta del nodo 0 al 13
camino = trazar_camino(predecessors[0], 0, 13)
print("El camino desde el nodo 0 hasta el nodo 13 es:", camino)
print("La distancia mínima entre el nodo 0 y el nodo 13 es:", dist_matrix[0, 13])
fin = timeit.default_timer()
tiempo_ejecución = round(fin - inicio, 4)
print("Tiempo de ejecución: ", tiempo_ejecución, " segundos")
# Función para trazar la ruta
def Trazar_camino_intermedio(predecesores, nodo_inicio, nodo_fin):
camino = []
nodo_actual = nodo_fin
while nodo_actual != nodo_inicio:
camino.insert(0, nodo_actual)
nodo_actual = predecesores[nodo_actual]
return camino
# Fución para crea la ruta
def Crear_ruta(M, inicio, destinos):
# Iniciar la ruta en el nodo inicial
ruta = np.array([inicio])
distancia = 0
nodo_más_cercano = inicio
destinos = np.array(destinos)
# Mientras queden destinos por visitar
while len(destinos) > 0:
# Utilizar el algoritmo de Dijkstra para encontrar
# la ruta más corta a cada nodo destino
dist_matrix, predecessors= dijkstra(M, directed=True,
indices=nodo_más_cercano, return_predecessors=True, limit=50000)
nodo_anterior = nodo_más_cercano
# Pasar la matriz de distancias a diccionario
dist_dic = {index: value for index, value in enumerate(dist_matrix)}
# Eliminar todos los valores que sean 0 y los nodos que no estén en destinos
dist_dic = {key: value for key, value in dist_dic.items()
if value != 0 and key in destinos}
# Encontrar el valor mínimo en el diccionario de distancias
min_value = min(dist_dic.values())
# Encontrar el siguiente nodo más cercano
for key, value in dist_dic.items():
if value == min_value:
nodo_más_cercano = key
break
# Actualizar la lista de destinos eliminando el nodo más cercano encontrado
destinos = destinos[destinos != nodo_más_cercano]
# Añadir el camino intermedio a la ruta
ruta = np.concatenate((ruta,
np.array(Trazar_camino_intermedio(predecessors, nodo_anterior, nodo_más_cercano))))
# Sumar la distancia al nodo más cercano a la distancia total
distancia += dist_dic[nodo_más_cercano]
# Devolver la ruta completa y la distancia total
return ruta, distancia
# Importar librerias
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import random
import scipy.sparse as sp
from scipy.sparse import csr_matrix
import osmnx as ox
import sys
import timeit
# Semilla para reproducibilidad
np.random.seed(2706)
# Crear una grafo con 20 nodos
G = nx.Graph()
for i in range(13):
G.add_node(i)
# Añade aristas a la gráfica
G.add_edge(0, 3)
G.add_edge(13, 6)
G.add_edge(6, 9)
G.add_edge(9, 10)
G.add_edge(0, 2)
G.add_edge(2, 5)
G.add_edge(5, 8)
G.add_edge(8, 1)
G.add_edge(0, 1)
G.add_edge(1, 4)
G.add_edge(4, 7)
G.add_edge(7, 10)
G.add_edge(3, 6)
G.add_edge(6, 9)
G.add_edge(13, 10)
G.add_edge(12, 9)
G.add_edge(11, 10)
G.add_edge(13, 11)
G.add_edge(11, 7)
G.add_edge(7, 4)
G.add_edge(4, 9)
G.add_edge(1, 2)
G.add_edge(12, 5)
G.add_edge(5, 8)
G.add_edge(8, 11)
G.add_edge(11, 12)
G.add_edge(12, 10)
G.add_edge(4, 10)
G.add_edge(2, 12)
# Asigna un peso aleatorio a cada arista
for u, v in G.edges:
G.edges[u, v]['weight'] = np.random.randint(1, 6)
# Calcula la matriz de adyacencia en forma de matriz dispersa
matriz_adyacencia = csr_matrix(nx.to_numpy_array(G))
# Dibujar el grafo con nodos en forma de elipse
fig = plt.figure(figsize=(8, 6))
# Número de nodos
num_nodos = len(G.nodes)
# Calcular las posiciones en forma de elipse
pos = {}
for i in range(num_nodos):
angle = 2 * np.pi * i / num_nodos
x = np.cos(angle)
y = np.sin(angle)
pos[i] = (x, y)
# Dibujar nodos y aristas
nx.draw(G, pos, with_labels=True, node_color='lightblue',
edge_color='darkgrey', node_size=1500, font_size=20)
plt.show()
# Función para trazar el camino desde un nodo dado
# hasta el nodo de inicio utilizando el array de predecesores
def trazar_camino(predecesores, nodo_inicio, nodo_fin):
camino = []
nodo_actual = nodo_fin
while nodo_actual != nodo_inicio:
camino.insert(0, nodo_actual)
nodo_actual = predecesores[nodo_actual]
camino.insert(0, nodo_inicio)
camino = np.array(camino, dtype=int)
return camino
from scipy.sparse.csgraph import dijkstra
inicio = timeit.default_timer()
for i in range(10000):
# Utiliza el algoritmo de Dijkstra a través de scipy
dist_matrix, predecessors = dijkstra(matriz_adyacencia, directed=False,
indices = 0, return_predecessors=True)
# Ruta del nodo 0 al 13
camino = trazar_camino(predecessors, 0, 13)
print("El camino desde el nodo 0 hasta el nodo 13 es:", camino)
print("La distancia mínima entre el nodo 0 y el nodo 13 es:", dist_matrix[13])
fin = timeit.default_timer()
tiempo_ejecución = round(fin - inicio, 4)
print("Tiempo de ejecución: ", tiempo_ejecución, " segundos")
from scipy.sparse.csgraph import bellman_ford
inicio = timeit.default_timer()
for i in range(10000):
# Utiliza el algoritmo de Bellman-Ford a través de scipy
dist_matrix, predecessors = bellman_ford(matriz_adyacencia, directed=False,
indices=0, return_predecessors=True)
# Ruta del nodo 0 al 13
camino = trazar_camino(predecessors, 0, 13)
print("El camino desde el nodo 0 hasta el nodo 13 es:", camino)
print("La distancia mínima entre el nodo 0 y el nodo 13 es:", dist_matrix[13])
fin = timeit.default_timer()
tiempo_ejecución = round(fin - inicio, 4)
print("Tiempo de ejecución: ", tiempo_ejecución, " segundos")
from scipy.sparse.csgraph import johnson
inicio = timeit.default_timer()
for i in range(10000):
#Utiliza el algoritmo de Johnson a través de scipy
dist_matrix, predecessors = johnson(matriz_adyacencia ,directed=False,
indices=0, return_predecessors=True)
# Ruta del nodo 0 al 13
camino = trazar_camino(predecessors, 0, 13)
print("El camino desde el nodo 0 hasta el nodo 13 es:", camino)
print("La distancia mínima entre el nodo 0 y el nodo 13 es:", dist_matrix[13])
fin = timeit.default_timer()
tiempo_ejecución = round(fin - inicio, 4)
print("Tiempo de ejecución: ", tiempo_ejecución, " segundos")
from scipy.sparse.csgraph import floyd_warshall
inicio = timeit.default_timer()
for i in range(10000):
#Utiliza el algoritmo de Floyd-Warshall a través de scipy
#Nota: Este algoritmo no permite calcular la distancia eligiendo un nodo de inicio
dist_matrix, predecessors = floyd_warshall(matriz_adyacencia, unweighted=False,
directed=False, return_predecessors=True)
# Ruta del nodo 0 al 13
camino = trazar_camino(predecessors[0], 0, 13)
print("El camino desde el nodo 0 hasta el nodo 13 es:", camino)
print("La distancia mínima entre el nodo 0 y el nodo 13 es:", dist_matrix[0, 13])
fin = timeit.default_timer()
tiempo_ejecución = round(fin - inicio, 4)
print("Tiempo de ejecución: ", tiempo_ejecución, " segundos")
# Función para trazar la ruta
def Trazar_camino_intermedio(predecesores, nodo_inicio, nodo_fin):
camino = []
nodo_actual = nodo_fin
while nodo_actual != nodo_inicio:
camino.insert(0, nodo_actual)
nodo_actual = predecesores[nodo_actual]
return camino
# Fución para crea la ruta
def Crear_ruta(M, inicio, destinos):
# Iniciar la ruta en el nodo inicial
ruta = np.array([inicio])
distancia = 0
nodo_más_cercano = inicio
destinos = np.array(destinos)
# Mientras queden destinos por visitar
while len(destinos) > 0:
# Utilizar el algoritmo de Dijkstra para encontrar
# la ruta más corta a cada nodo destino
dist_matrix, predecessors= dijkstra(M, directed=True,
indices=nodo_más_cercano, return_predecessors=True, limit=50000)
nodo_anterior = nodo_más_cercano
# Pasar la matriz de distancias a diccionario
dist_dic = {index: value for index, value in enumerate(dist_matrix)}
# Eliminar todos los valores que sean 0 y los nodos que no estén en destinos
dist_dic = {key: value for key, value in dist_dic.items()
if value != 0 and key in destinos}
# Encontrar el valor mínimo en el diccionario de distancias
min_value = min(dist_dic.values())
# Encontrar el siguiente nodo más cercano
for key, value in dist_dic.items():
if value == min_value:
nodo_más_cercano = key
break
# Actualizar la lista de destinos eliminando el nodo más cercano encontrado
destinos = destinos[destinos != nodo_más_cercano]
# Añadir el camino intermedio a la ruta
ruta = np.concatenate((ruta,
np.array(Trazar_camino_intermedio(predecessors, nodo_anterior, nodo_más_cercano))))
# Sumar la distancia al nodo más cercano a la distancia total
distancia += dist_dic[nodo_más_cercano]
# Devolver la ruta completa y la distancia total
return ruta, distancia
# Descargo el mapa de Madrid y lo guardo como grafo
# Nombre del lugar
place_name = "Madrid, Spain"
# Descargar la red de calles del lugar
G = ox.graph_from_place(place_name, network_type='drive', simplify = False)
# Guardar el grafo en un archivo GraphML
# El tiempo de descarga es elevado
ox.save_graphml(G, filepath='mapa/madrid2.graphml')
# Importo el grafo guardado
madrid = ox.load_graphml('mapa/madrid2.graphml')
# Calcular el número de nodos y aristas
num_nodos = len(madrid.nodes)
num_aristas = len(madrid.edges)
print(f"Número de nodos: {num_nodos}")
print(f"Número de aristas: {num_aristas}")
# Calcular la longitud de la red de calles
longitud = round(sum(nx.get_edge_attributes(madrid, 'length').values()))
longitud = round(longitud/1000)
print(f"Longitud total de la red de calles: {longitud} kilometros")
# Mostrar el grafo de la red de calles de Madrid
fig, ax = ox.plot_graph(madrid, bgcolor='none', node_color='b',
node_size=1.5, edge_color='k',
edge_linewidth=0.1, edge_alpha=0.8,
figsize=(20, 20),show=True)
#plt.savefig('imagenes/mapa_madrid.jpg', dpi=200)
plt.close()
# Convertir el grafo de Madrid en una matriz de adyacencia
#matriz_madrid = csr_matrix(nx.to_numpy_array(madrid, weight='length'))
# Guardar matriz para su posterior uso
# El tiempo de conversión es un poco elevado
#sp.save_npz('matriz/matriz_madrid.npz', matriz_madrid)
